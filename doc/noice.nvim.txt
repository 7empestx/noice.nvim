*noice.nvim.txt*          For NVIM v0.5.0         Last change: 2022 October 03

==============================================================================
Table of Contents                               *noice.nvim-table-of-contents*

1. Noice _(Nice, Noise, Notice)_    |noice.nvim-noice-_(nice,-noise,-notice)_|
  - Features                                             |noice.nvim-features|
  - Status                                                 |noice.nvim-status|
  - Requirements                                     |noice.nvim-requirements|
  - Installation                                     |noice.nvim-installation|
  - Configuration                                   |noice.nvim-configuration|
  - Usage                                                   |noice.nvim-usage|
  - Known Issues                                     |noice.nvim-known-issues|

==============================================================================
1. Noice _(Nice, Noise, Notice)_    *noice.nvim-noice-_(nice,-noise,-notice)_*

Highly experimental plugin that completely replaces the UI for `messages`,
`cmdline` and the `popupmenu`.

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/193263220-791847b2-516c-4f23-9802-31dd6bec5f6a.png" title="fig:"/>
<p class="caption">image</p>
</div>

FEATURES                                                 *noice.nvim-features*


- fully **configurable views** like nvim-notify <https://github.com/rcarriga/nvim-notify>, splits, popups, virtual text, ..
- use **filters** to **route messages** to different views
- message **highlights** are preserved in the views (like the colors of `:hi`)
- |:messages| are shown in normal buffers, which makes them much easier to work with
- `:Noice` command to show a full message history
- no more |:h more-prompt|
- fully customizable **cmdline** with icons
- **syntax highlighting** for `vim` and `lua` on the **cmdline**
- **statusline** components


STATUS                                                     *noice.nvim-status*

**WIP**

REQUIREMENTS                                         *noice.nvim-requirements*


- Neovim >= 0.9.0 or nightly
- nui.nvim <https://github.com/MunifTanjim/nui.nvim>: used for proper rendering and multiple views
- nvim-notify <https://github.com/rcarriga/nvim-notify>: notification view
- nvim-cmp <https://github.com/hrsh7th/nvim-cmp>: we use some internal views for rendering the cmdline completion popup.


INSTALLATION                                         *noice.nvim-installation*

Install the plugin with your preferred package manager:

>
    -- Packer
    use({
      "folke/noice.nvim",
      event = "VimEnter",
      config = function()
        require("noice").setup()
      end,
    })
<


CONFIGURATION                                       *noice.nvim-configuration*

**noice.nvim** comes with the following defaults:


  TODO: add proper documentation for views, routes, options


>
    {
      cmdline = {
        view = "cmdline_popup", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
        opts = { buf_options = { filetype = "vim" } }, -- enable syntax highlighting in the cmdline
        menu = "popup", -- @type "popup" | "wild", -- what style of popupmenu do you want to use?
        icons = {
          ["/"] = { icon = " ", hl_group = "DiagnosticWarn" },
          ["?"] = { icon = " ", hl_group = "DiagnosticWarn" },
          [":"] = { icon = " ", hl_group = "DiagnosticInfo", firstc = false },
        },
      },
      history = {
        -- options for the message history that you get with `:Noice`
        view = "split",
        opts = { enter = true },
        filter = { event = "msg_show", ["not"] = { kind = { "search_count", "echo" } } },
      },
      throttle = 1000 / 30, -- how frequently does Noice need to check for ui updates? This has no effect when in blocking mode.
      views = {}, -- @see the section on views below
      routes = {}, -- @see the section on routes below
    }
<


FILTERS ~

**Noice** uses filters to route messages to specific views.

│    Name    │           Type           │                                Description                                 │
│_cleared_   │boolean                   │checks if the message is cleared, meaning it’s in the history             │
│_mode_      │string                    │checks if vim.api.nvim_get_mode() contains the given mode                   │
│_blocking_  │boolean                   │are we in blocking mode?                                                    │
│_event_     │string or string[]        │any of the events from ext_messages or cmdline. See |:h ui-messages|        │
│_kind_      │string or string[]        │any of the kinds from ext_messages. See |:h ui-messages|                    │
│_error_     │boolean                   │all error-like kinds from ext_messages                                      │
│_warning_   │boolean                   │all warning-like kinds from ext_messages                                    │
│_find_      │string                    │uses lua string.find to match the pattern                                   │
│_min_height_│number                    │minimum height of the message                                               │
│_max_height_│number                    │maximum height of the message                                               │
│_not_       │filter                    │checks wether the filter matches or not                                     │
│_any_       │filter[]                  │checks that at least one of the filters matches                             │


Example:

>
    -- all messages over 10 lines, excluding echo and search_count
    local filter = {
      event = "msg_show",
      min_height = 10,
      ["not"] = { kind = { "search_count", "echo" } },
    }
<


VIEWS ~

**Noice** comes with the following built-in renderers: - **popup** powered by
nui.nvim <https://github.com/MunifTanjim/nui.nvim> - **split** powered by
nui.nvim <https://github.com/MunifTanjim/nui.nvim> - **notify** powered by
nvim-notify <https://github.com/rcarriga/nvim-notify> - **virtualtext** shows
the message as virtualtext (for example for `search_count`)

**Views** (`config.views`) are combinations of `render` methods and options.

**Noice** comes with the following built-in views with sane defaults: -
**notify** with default level and replaces existing notification by default -
**split** horizontal split - **vsplit** vertical split - **popup** -
**cmdline** bottom line, similar to the classic cmdline - **cmdline_popup**
fancy cmdline popup, with different styles according to the cmdline mode

Please refer to noice.config.views
<https://github.com/folke/noice.nvim/blob/main/lua/noice/config/views.lua> to
see the options.

Any options passed to existing views in `config.views`, will override those
options only.

You can configure completely new views and use them in custom routes.

Example:

>
    -- override the default split view to always enter the split when it opens
    require("noice").setup({
        views = {
            split = {
                enter = true
              }
          }
      })
<


**Nui Options**

See the Nui documentation for Popup
<https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup> and Split
<https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/split>.

Size & position can additionally be specified as `"auto"`, to use the message
height and width.

**Notify Options**


- **title** title to be used for the notification
- **replace** `boolean` when true, messages routing to the same notify instance will replace existing messages instead of pushing a new notification every time


**Virtual Text Options**

Right now there’s only an option to set the `hl_group` used to render the
virtual text.

ROUTES ~

A **route** has a `filter`, `view` and optional `opts` attribute. - **view**:
one of the views (built-in or custom) - **filter** a filter for messages
matching this route - **opts**: options for the view and the route

Route options can be any of the view options above, or one of: - **skip**:
messages matching this filter will be skipped and not shown in any views -
**stop** (`boolean`) defaults to `true`. When `false` and a route matches the
filter, then other routes can still process the message too. Useful if you want
certain messages to be shown in multiple views.

Please refer to noice.config.routes
<https://github.com/folke/noice.nvim/blob/main/lua/noice/config/routes.lua> for
an overview of the default routes.

**Routes** passed to `setup()` will be prepended to the default routes.

Example:

>
    -- skip search_count messages instead of showing them as virtual text
    require("noice").setup({
      routes = {
        {
          filter = { event = "msg_show", kind = "search_count" },
          opts = { skip = true },
        },
      },
    })
    
    -- always route any messages with more than 20 lines to the split view
    require("noice").setup({
      routes = {
        {
          view = "split",
          filter = { event = "msg_show", min_height = 20 },
        },
      },
    })
<


STATUSLINE COMPONENTS ~

**Noice** comes with the following statusline components: **ruler**
**message**: last line of the last message (`event=show_msg`) **command**:
`showcmd` **mode**: `showmode` (recordin messages) **search**: search count
messages

Statusline components have the following methods: - **get**: gets the content
of the message **without** highlights - **get_hl**: gets the content of the
message **with** highlights - **has**: checks if the component is available

Example of configuring lualine.nvim
<https://github.com/nvim-lualine/lualine.nvim>

>
    require("lualine").setup({
      sections = {
        lualine_x = {
          {
            require("noice.status").message.get_hl,
            cond = require("noice.status").message.has,
          },
          {
            require("noice.status").command.get,
            cond = require("noice.status").command.has,
            color = { fg = "ff9e64" },
          },
          {
            require("noice.status").mode.get,
            cond = require("noice.status").mode.has,
            color = { fg = "ff9e64" },
          },
          {
            require("noice.status").search.get,
            cond = require("noice.status").search.has,
            color = { fg = "ff9e64" },
          },
        },
      },
    })
<


USAGE                                                       *noice.nvim-usage*


- `:Noice` shows the message history
- `:Noice disable` disables **Noice**
- `:Noice enable` enables **Noice**
- `:Noice stats` shows debugging stats


KNOWN ISSUES                                         *noice.nvim-known-issues*

**Noice** is using the new experimental `vim.ui_attach` API.

During setup, we apply a bunch of Hacks
<https://github.com/folke/noice.nvim/blob/main/lua/noice/hacks.lua> to work
around some of the current issues.

For more details, see https://github.com/folke/noice.nvim/issues/6

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
